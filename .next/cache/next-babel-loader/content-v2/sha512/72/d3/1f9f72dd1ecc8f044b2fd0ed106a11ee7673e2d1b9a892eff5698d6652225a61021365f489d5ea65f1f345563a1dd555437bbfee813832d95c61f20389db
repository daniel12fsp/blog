{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nconst layoutProps = {};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _objectSpread(_objectSpread(_objectSpread({}, layoutProps), props), {}, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, `#1 - Criar uma aplicacao js que roda em container docker`), mdx(\"h2\", null, `Aplicação genérica que vamos gerar uma imagem`), mdx(\"pre\", _objectSpread({}, {\n    \"className\": \"language-js\"\n  }), mdx(\"code\", _objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), `/* salvar o arquivo ./app.js */`), `\n\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `const`), ` http `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `=`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), `require`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), `\"http\"`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `const`), ` url `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `=`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), `require`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), `\"url\"`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `const`), ` port `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `=`), ` process`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token property-access\"\n  }), `env`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token constant\"\n  }), `PORT`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `||`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), `3000`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `const`), ` server `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `=`), ` http`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token method function property-access\"\n  }), `createServer`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token parameter\"\n  }), `req`, mdx(\"span\", _objectSpread({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `,`), ` res`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token arrow operator\"\n  }), `=>`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), `\n  res`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token method function property-access\"\n  }), `writeHead`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), `200`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `,`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), `\"Content-Type\"`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `:`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), `\"text/html\"`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n  res`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token property-access\"\n  }), `statusCode`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), `=`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), `200`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n  res`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token method function property-access\"\n  }), `write`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token template-string\"\n  }), mdx(\"span\", _objectSpread({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token template-punctuation string\"\n  }), `\\``), mdx(\"span\", _objectSpread({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token string\"\n  }), `<h1>Hello World</h1>`), mdx(\"span\", _objectSpread({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token template-punctuation string\"\n  }), `\\``)), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n  res`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token method function property-access\"\n  }), `end`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n\nserver`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token method function property-access\"\n  }), `listen`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), `port`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `,`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token arrow operator\"\n  }), `=>`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `{`), `\n  `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token console class-name\"\n  }), `console`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `.`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token method function property-access\"\n  }), `log`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `(`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token template-string\"\n  }), mdx(\"span\", _objectSpread({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token template-punctuation string\"\n  }), `\\``), mdx(\"span\", _objectSpread({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token string\"\n  }), `Server listening on the port `), mdx(\"span\", _objectSpread({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token interpolation\"\n  }), mdx(\"span\", _objectSpread({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token interpolation-punctuation punctuation\"\n  }), `\\${`), `port`, mdx(\"span\", _objectSpread({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token interpolation-punctuation punctuation\"\n  }), `}`)), mdx(\"span\", _objectSpread({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token template-punctuation string\"\n  }), `\\``)), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `}`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `)`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `;`), `\n`)), mdx(\"h2\", null, `Criar Dockerfile(Receita da aplicação)`), mdx(\"pre\", _objectSpread({}, {\n    \"className\": \"language-dockerfile\"\n  }), mdx(\"code\", _objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-dockerfile\"\n  }), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), `# salvar  ./Dockerfile\\\\n`), `\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `FROM`), ` node`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `:`), `slim\n\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `WORKDIR`), ` /usr/home\n\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `COPY`), ` app.js .\n\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `EXPOSE`), ` 3000\n\n`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token keyword\"\n  }), `CMD`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `[`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), `\"node\"`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `,`), ` `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token string\"\n  }), `\"app.js\"`), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `]`), `\n\n`)), mdx(\"h2\", null, `Buildar/Construir a imagem docker`), mdx(\"pre\", _objectSpread({}, {\n    \"className\": \"language-dockerfile\"\n  }), mdx(\"code\", _objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-dockerfile\"\n  }), mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token comment\"\n  }), `# Na pasta aonde está o Dockerfile e app.js`), `\ndocker build `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `-`), `t generic_app`, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), `:`), `v1\n\n`)), mdx(\"h2\", null, `Executar aplicação constuída`), mdx(\"pre\", _objectSpread({}, {\n    \"className\": \"language-bash\"\n  }), mdx(\"code\", _objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), `docker run --name app -p `, mdx(\"span\", _objectSpread({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), `3000`), `:3000 -it generic_app:v1\n`)), mdx(\"h2\", null, `Bom vc será capaz de ver nesse link`), mdx(\"p\", null, `http://localhost:3000/`));\n}\n;\nMDXContent.isMDXComponent = true;","map":null,"metadata":{},"sourceType":"module"}