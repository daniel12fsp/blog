{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from \"fs\";\nimport { getMetadataFilePath, postDirectoriesPath } from \"../constants\";\n\nfunction getMetadata(postDirectory) {\n  const metadataFilePath = getMetadataFilePath(postDirectory);\n\n  try {\n    const textMetadata = fs.readFileSync(metadataFilePath, \"utf8\");\n    const metadata = JSON.parse(textMetadata);\n    return _objectSpread(_objectSpread({}, metadata), {}, {\n      link: postDirectory\n    });\n  } catch (e) {\n    console.log(\"getMetadata failded\", e);\n    return {};\n  }\n}\n\nexport async function getPosts() {\n  const util = require(\"util\");\n\n  const readdir = util.promisify(fs.readdir);\n  const postDirectories = await readdir(postDirectoriesPath);\n  const metadatas = postDirectories.map(getMetadata);\n  return metadatas;\n}","map":null,"metadata":{},"sourceType":"module"}